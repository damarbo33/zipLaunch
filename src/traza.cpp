// Class automatically generated by Dev-C++ New Class wizard

#include "traza.h" // class's header file

FILE *Traza::fout;

bool Traza::pintarTrazas;
bool Traza::isConsole;

/**
* Constructor
*/
Traza::Traza(const char *ruta){
    strcpy(this->ruta,ruta);
    iniFile();
}

/**
* Constructor
*/
Traza::Traza(){
    strcpy(this->ruta,RUTA_TRAZA);
    iniFile();
}

/**
* Destructor
*/
Traza::~Traza(){
    closeFile();
}


/**
*
*/
void Traza::iniFile(){
    fout = NULL;
    setTraza(TRAZA_ENABLED);
    setConsole(TRAZA_CONSOLE);
    fout = fopen(ruta,"at+");
}

/**
* closeFile
*/
void Traza::closeFile(){
    if (this->fout != NULL){
        fclose(this->fout);
        this->fout = NULL;
    }
}


/**
* print
*/
void Traza::print(string msg, string msg2, int logLevel){
    if (pintarTrazas && logLevel <= TRAZA_LEVEL){
        string myMsg = msg + ":" + msg2;
        print(myMsg.c_str(), logLevel);
    }
}

///**
//* print
//*/
//void Traza::print(const char *msg, const char *msg2, int logLevel){
//    if (pintarTrazas && logLevel <= TRAZA_LEVEL){
//        string myMsg = string(msg) + string(":") + Constant::TipoToStr(msg2);
//        print(myMsg.c_str(), logLevel);
//    }
//}

/**
* print
*/
void Traza::print(const char *msg,int msg2, int logLevel){

    if (pintarTrazas && logLevel <= TRAZA_LEVEL){
        string myMsg = string(msg) + string(":") + Constant::TipoToStr(msg2);
        print(myMsg.c_str(), logLevel);
    }
}

/**
* print
*/
void Traza::print(const char *msg, int logLevel){
    if (pintarTrazas && logLevel <= TRAZA_LEVEL){
        if ( fout != NULL){
            if (msg != NULL){
                string type = "-DEBUG";
                switch(logLevel){
                    case 0 :
                        type = "-FATAL";
                        break;
                    case 1 :
                        type = "-ERROR";
                        break;
                    case 2 :
                        type = "-WARN";
                        break;
                    case 3 :
                        type = "-INFO";
                        break;
                    case 4 :
                        type = "-DEBUG";
                        break;
                    case 5:
                        type = "-PARANOIC";
                        break;
                    default :
                        type = "-DDEBUG";
                        break;
                }
                type.append(": ");
                fwrite(type.c_str(), sizeof(char) , type.length(), fout);
                fwrite(msg, sizeof(char) , strlen(msg), fout);
                if (isConsole)
                    cout << msg << endl;
            }
            fwrite(VBCRLF, sizeof(char) , strlen(VBCRLF), fout);
        }
    }
}

/**
* setTraza
*/
void Traza::setTraza(bool estado){
    pintarTrazas = estado;
}

/**
*
*/
void Traza::setConsole(bool var){
    isConsole = var;
}
